# -*- coding: utf-8 -*-
"""Building a CNN Binary classification model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14l1APGds5kwfqeQe2qK2IHPbCSKce4kr

Implementation

Step 1: Open up you Jupyter notebook and create a blank Python3 notebook.

Step 2:Import the following Modules.
"""

import numpy as np 
import pandas as pd 
import os
import keras
from sklearn.model_selection import train_test_split
import tensorflow as tf
import tensorflow.keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.models import Sequential
import random
from zipfile import ZipFile
import os
import shutil

"""Lets connect the colab with the g-drive for importing dataset train test."""

from google.colab import drive
drive.mount('/content/gdrive')

"""#lets zip off files and makes path for train and test the fiels"""

from zipfile import ZipFile
file_name = "/content/gdrive/MyDrive/dogs-vs-cats.zip"

with ZipFile(file_name, 'r') as zip:
  zip.extractall()
  print('Done')

from zipfile import ZipFile
train_data = "//content/train.zip"

with ZipFile(train_data, 'r') as zip:
  zip.extractall()
  print('Done')

from zipfile import ZipFile
file_name = "/content/test1.zip"

with ZipFile(file_name, 'r') as zip:
  zip.extractall()
  print('Done')

train_path = "./train"
test_path = "./test1"

"""# lets define the function for categories list and make a dataframe and review """

filenames = os.listdir(train_path)
categories = []
for filename in filenames:
    category = filename.split('.')[0]
    if category == 'dog':
        categories.append(category)
    else:
        categories.append(category)

df = pd.DataFrame({
    'Image': filenames,
    'Category': categories
      })
df.head(-5)

"""#Lets plot the Category columns to vizualised in bar plots"""

df['Category'].value_counts().plot.bar()

df_train, df_validation = train_test_split(df, test_size=0.1, random_state=18)
df_train = df_train.reset_index(drop=True)
df_validation = df_validation.reset_index(drop=True)

"""#lets check out the train data, images which are will be random plots for dogs and cats"""

sample = random.choice(df['Image'])
plt.imshow(plt.imread(("./train/"+sample)))

sample = random.choice(df['Image'])
plt.imshow(plt.imread(("./train/"+sample)))

df_train.shape

filenames = os.listdir(test_path)
df_test = pd.DataFrame({'Image':filenames})

df_test.head(-5)

"""# lets setup variables to define size of image and its channel RGB,batch_size,and no epochs .

## lets create objects make data_augmentation on the train data set and make validation for accurate training
"""

datagen = ImageDataGenerator(rescale=1./255,
                             zoom_range=0.2,
                             width_shift_range=.2, height_shift_range=.2,
                             rotation_range=30,
                             brightness_range=[0.8, 1.2],
                             horizontal_flip=True)

datagenValidation = ImageDataGenerator(rescale=1./255)

X_train = datagen.flow_from_dataframe(
    df_train, 
    directory = train_path, 
    x_col = 'Image',
    y_col = 'Category',
    target_size= (150,150),
    class_mode = 'binary',
    shuffle = True,
    batch_size = 32)

X_validation = datagenValidation.flow_from_dataframe(
    df_validation, 
    directory = train_path, 
    x_col = 'Image',
    y_col = 'Category',
    target_size= (150,150),
    class_mode = 'binary',
    shuffle = True,
    batch_size = 32)

"""#Lets define the objects for the test data also when we test with builded model."""

X_test = datagenValidation.flow_from_dataframe(
    df_test, 
    directory=test_path, 
    x_col='Image',
    y_col=None,
    class_mode=None,
    target_size= (150,150),
    batch_size=32,
    shuffle=False
)

"""### Defining our CNN Model Layers

## Model 
"""

model = tf.keras.models.Sequential()

"""## Adding the first CNN layer

CNN layer hyper-parameters:
filters: 32
kernel_size:3
activation: relu
input_shape: (150, 150, 3)

maxpooling_Layer (2,2)
"""

model.add(keras.layers.Conv2D(32,(3,3),activation='relu',input_shape=(150,150,3)))
model.add(keras.layers.MaxPool2D(2,2))

"""Adding 2nd CNN layer 

CNN layer hyper-parameters:
filters: 64
kernel_size:3
activation: relu


maxpooling_Layer (2,2)
"""

model.add(keras.layers.Conv2D(64,(3,3),activation='relu'))
model.add(keras.layers.MaxPool2D(2,2))

"""   Adding 3rd CNN layer
CNN layer hyper-parameters:
filters: 128
kernel_size:3
activation: relu


maxpooling_Layer (2,2)
"""

model.add(keras.layers.Conv2D(128,(3,3),activation='relu'))
model.add(keras.layers.MaxPool2D(2,2))

"""   Adding 4th CNN layer
CNN layer hyper-parameters:
filters: 128
kernel_size:3
activation: relu


maxpooling_Layer (2,2)
"""

model.add(keras.layers.Conv2D(128,(3,3),activation='relu'))
model.add(keras.layers.MaxPool2D(2,2))

"""# This layer flattens the resulting image array to 1D array """

model.add(keras.layers.Flatten())

"""# Hidden layer with 512 neurons and Rectified Linear Unit activation function """

model.add(keras.layers.Dense(512,activation='relu'))

"""# Output layer with single neuron which gives 0 for Cat or 1 for Dog 
#Here we use sigmoid activation function which makes our model output to lie between 0 and 1
"""

model.add(keras.layers.Dense(1,activation='sigmoid'))

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

model

"""# Training our Model"""

history = model.fit(X_train, validation_data=X_validation,steps_per_epoch = 250, epochs=20)

#As you can see our model has a training accuracy of 80% which is nearly 84% and validation accuracy of 93% which is not bad.(step_per_epochs=250,where epochs = 20)
#As you can see our model has a training accuracy of 89% which is nearly 90% and validation accuracy of 93% which is not bad.(no batches and total 770 with epochs = 20)

model.summary()

"""# Here below shows the numbers for cat and Dog"""

X_train.class_indices

y_pred = model.predict(X_test)

label = np.where(y_pred=="Cat", 0, 1)
label

y_pred = np.where(y_pred > .5, "Dog", "Cat")
y_pred

"""#Using our model to make Predictions

### Lets some figure to check in smaller dimensions
"""

plt.figure(figsize=(15,15))
for i in range(9):
    plt.subplot(3,3,i+1)
    plt.imshow(X_test[0][i])
    plt.xlabel(y_pred[i])
    
plt.show()

